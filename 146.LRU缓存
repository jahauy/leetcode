/* 
 * @author: Edison
 * @date: 2022/6/30
*/
#include <bits/stdc++.h>

using namespace std;

using DataT = pair<int, int>; // key, value
using DoubleList = list<DataT>;
using DLNode = DoubleList::iterator;

class LRUCache {
public:
    LRUCache(int capacity) : capacity(capacity)
    {

    }

    int get(int key)
    {
        if (table.count(key) == 0) return -1;
        auto tmp = table[key]`````;
        int value = tmp->second;
        linkedList.erase(tmp);
        linkedList.emplace_front(key, value);
        table[key] = linkedList.begin();
        return value;
    }

    void put(int key, int value)
    {
        if (table.count(key) != 0) {
            linkedList.erase(table[key]);
        } else {
            if (table.size() == capacity) {
                table.erase(linkedList.back().first);
                linkedList.pop_back();
            }
        }
        linkedList.emplace_front(key, value); // 插入头部
        table[key] = linkedList.begin();
    }

private:
    const int capacity;
    DoubleList linkedList;
    unordered_map<int, DLNode> table;
};

// 测试框架
// ------------------------------------------------------
typedef struct {
    int capacity;
    vector<pair<string, vector<int>>> ops;
    vector<int> target;
} TestCaseItem;

static vector<TestCaseItem> TestCaseSet = {
        {
                .capacity = 2,
                .ops = {
                        {"put", {1, 1}},
                        {"put", {2, 2}},
                        {"get", {1}},
                        {"put", {3, 3}},
                        {"get", {2}},
                        {"put", {4, 4}},
                        {"get", {1}},
                        {"get", {3}},
                        {"get", {4}},
                },
                .target = {0, 0, 0, 1, 0, -1, 0, -1, 3, 4}
        },
        {
                .capacity = 2,
                .ops = {
                        {"put", {2, 1}},
                        {"put", {2, 2}},
                        {"get", {2}},
                        {"put", {1, 1}},
                        {"put", {4, 1}},
                        {"get", {2}},
                },
                .target = {0, 0, 0, 2, 0, 0, -1}
        }
};

void TestLruCache(void)
{
    int i = 0;
    for (auto& testCase: TestCaseSet) {
        vector<int> ret;
        auto lru = LRUCache(testCase.capacity);
        ret.emplace_back(0);
        for (auto item: testCase.ops) {
            auto opsValue = item.second;
            cout << item.first << ": " << opsValue[0] << ", ";
            if (item.first == "get") {
                auto tmp = lru.get(opsValue[0]);
                ret.emplace_back(tmp);
            } else {
                cout << opsValue[1];
                lru.put(opsValue[0], opsValue[1]);
                ret.emplace_back(0);
            }
            cout << endl;
        }
        for (auto item: ret) {
            cout << item << ", ";
        }
        cout << endl;
        if (testCase.target == ret) {
            printf("[OK] %d.\n", i);
        } else {
            printf("[FAILED] %d.\n", i);
        }
        i++;
    }
}
